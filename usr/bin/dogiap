#!/bin/bash

# Define the version
VERSION="1.0.6"
ssh_pattern="git@github\.com:.+/.+\.git"
https_pattern="https://github\.com/.+/.+\.git"
# ANSI color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
CYAN='\033[1;36m'
NC='\033[0m' # No Color
# Setup variables for GitHub Actions workflow file and service file
WorkflowFilePath="./.github/workflows/automatic-pull.yml"
WebHookServerUrl="129.242.219.112:5000/git-webhook"
SERVICE_PATH="/etc/systemd/system"

# Function to display usage information
function usage() {
    echo -e "${CYAN}Usage:${NC} dogiap <GitHub repository link>"
    echo -e "${CYAN}Options:${NC}"
    echo -e "  ${YELLOW}--setup${NC}\tSet up server for webhook requests"
    echo -e "  ${YELLOW}--start${NC}\tStart the server"
    echo -e "  ${YELLOW}--check${NC}\tCheck if the server is running"
    echo -e "  ${YELLOW}--list${NC}\t\tList all services"
    echo -e "  ${YELLOW}--log${NC}\t\tPrint out the logs for the service"
    echo -e "  ${YELLOW}--delete${NC}\tDelete the service"
    echo -e "  ${YELLOW}--version${NC}\tDisplay version information"
    echo -e "  ${YELLOW}--help${NC}\t\tDisplay this usage information"
    exit 1
}


# Function to display version information
function version() {
    echo "dogiap version $VERSION"
    exit 0
}

# Print status message to the terminal
function print_status() {
    local message="$1"
    local result="$2"
    local overwrite=${3:-1}  # Default value is 1 (overwrite)

    if [ "$result" == "success" ]; then
        if [ "$overwrite" -eq 1 ]; then
            echo -e "\033[F\r> ${GREEN}$message${NC}"
            echo -en "\033[K"
        else
            echo -e "> ${GREEN}$message${NC}"
        fi
    else
        if [ "$overwrite" -eq 1 ]; then
            echo -e "\033[F\r> ${RED}$message${NC}"
            echo -en "\033[K"
        else
            echo -e "> ${RED}$message${NC}"
        fi
    fi
}

function list_all_services() {
    echo -e "> Listing all services\n"

    # Find all service files in the /etc/systemd/system/ directory
    mapfile -t service_files < <(find /etc/systemd/system/ -maxdepth 1 -type f -name "dogiap*.service")

    if [ ${#service_files[@]} -eq 0 ]; then
        echo "> No services found in the system directory."
    else
        # Extract service names from file paths
        mapfile -t service_names < <(basename -s .service "${service_files[@]}")

        # Iterate through service names
        for service_name in "${service_names[@]}"; do
            # Remove "dogiap-" prefix when echoing
            display_name="${service_name/dogiap-/}"

            # Check if the service is active (running)
            if systemctl is-active --quiet $service_name; then
                # Print service name without "dogiap-" prefix in green
                echo -e "\e[32m> $display_name\e[0m \t(Running)"
            else
                # Print service name without "dogiap-" prefix in red
                echo -e "\e[31m> $display_name\e[0m \t(Not Running)"
            fi
        done
    fi
    echo ""
}

# Common function to check service file existence and prompt for setup
function check_SERVICE_FILE() {
    local SERVICE_FILE="$1"
    if [ ! -f "$SERVICE_FILE" ]; then
        while true; do
            read -p "$(echo -e "${YELLOW}> Do you want to set up the server? (y/n): ")" choice
            case "${choice}" in
                y)
                    server_setup
                    break
                    ;;
                n)
                    exit 1
                    ;;
                *)
                    echo "> Invalid input. Please enter 'y' or 'n'."
                    ;;
            esac
        done
    fi
}

function check() {
    # Specify the path to the Systemd service file
    RepoName=dogiap-hook-server
    local SERVICE_FILE="$SERVICE_PATH/$RepoName.service"

    # Check service file existence and prompt for setup
    check_SERVICE_FILE "$SERVICE_FILE"

    # Check if the Systemd service is active
    if sudo systemctl is-active --quiet $RepoName; then
        print_status "The server is running." "success" 0
    else
        print_status "The server is not running." "failure" 0
        
        while true; do
            read -p "$(echo -e "${YELLOW}> Do you want to start the server? (y/n): ")" choice
            case "${choice,,}" in
                y)
                    start
                    break
                    ;;
                n)
                    exit 1
                    ;;
                *)
                    echo "> Invalid input. Please enter 'y' or 'n'."
                    ;;
            esac
        done
    fi
}

# Function to print out the logs for the service
function print_service_logs() {
    local SERVICE_FILE="$SERVICE_PATH/dogiap-$RepoName.service"

    # Check if the service file exists
    if [ ! -f "$SERVICE_FILE" ]; then
        echo -e "${RED}Error:${NC} Service file '${SERVICE_FILE}' not found."
        exit 1
    fi

    # Check if the service is already active
    if sudo systemctl is-active --quiet "dogiap-$RepoName"; then
        echo -e "${GREEN}Logs for service '${RepoName}':${NC}"
        sudo journalctl -u "dogiap-$RepoName" -n 15
        exit 0
    else
        echo -e "${YELLOW}Warning:${NC} Service '${RepoName}' is not running."
        exit 1
    fi
}

function start() {
    echo "> Starting $RepoName"
    # Specify the path to the Systemd service file
    local SERVICE_FILE="$SERVICE_PATH/dogiap-$RepoName.service"


    # Check service file existence and prompt for setup
    check_SERVICE_FILE "$SERVICE_FILE"

    # Check if the Systemd service is already active
    if sudo systemctl is-active --quiet $RepoName; then
        print_status "$RepoName is already running" "success" 0
        exit 1
    else
        sudo systemctl start $RepoName > /dev/null 2>&1
        local start_status=$?
        if [ "$start_status" -eq 0 ]; then
            print_status "Starting $RepoName" "success"
        else
            print_status "Starting $RepoName" "failure"
            exit 1
        fi
    fi
}

function server_setup() {
    DirectoryPath="/srv/DogiapHookServer"
    RepoName=hook-server
    # Specify the path to the Systemd service file
    local SERVICE_FILE="$SERVICE_PATH/dogiap-$RepoName"

    # Check if the server is already running
    if sudo systemctl is-active --quiet dogiap-$RepoName; then
        print_status "The server is already running" "success" 0
        exit 1
    fi
    configure_git_ssh
    
    # Check if directory exists
    echo "> Checking if directory exists"
    if [ -d "$DirectoryPath" ]; then
        print_status "Checking if directory exists" "success"
        while true; do
            read -p "$(echo -e "${YELLOW}> Directory already exists. Do you want to delete it? (y/n): ${NC}")" choice

            if [ "$(echo "$choice" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                sudo rm -r "$DirectoryPath"  # Delete existing directory
                sudo mkdir "$DirectoryPath"   # Create a new directory
                # Check if the directory was created successfully
                if [ $? -eq 0 ]; then
                    print_status "Directory '$DirectoryPath' created" "success" 0
                else
                    print_status "Failed to create the '$DirectoryPath' Exiting." "failed" 0
                    exit 1
                fi
                break
            elif [ "$(echo "$choice" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                exit 1
                break
            else
                echo -e "${YELLOW}> Invalid input"
            fi
        done
    else
        sudo mkdir "$DirectoryPath"
        print_status "Directory created" "success"
    fi

    sudo chown -R $(whoami) $DirectoryPath
    # Change into the directory and initialize an empty Git repository
    (cd "$DirectoryPath" &&
        echo "> Initializing an empty Git repository"
        git init --quiet
        # Check if Git repository initialization was successful
        if [ $? -eq 0 ]; then
            print_status "Initializing an empty Git repository" "success"
        else
            print_status "Initializing an empty Git repository" "failed"
            exit 1
        fi

        # Attempt to add the remote origin without displaying output
        echo "> Adding remote 'origin'"
        git remote add -f origin https://github.com/TrakeLean/Dogiap > /dev/null 2>&1
        # Check if the remote was added successfully
        if [ $? -eq 0 ]; then
            print_status "Adding remote 'origin'" "success"
        else
            print_status "Adding remote 'origin'" "failed"
            exit 1
        fi

        git config core.sparseCheckout true
        echo "Hook-Server/*" >> .git/info/sparse-checkout

        # Pull changes from the remote repository
        echo "> Fetching the contents of 'Hook-Server' folder"
        if git pull --quiet origin main; then
            print_status "Fetching the contents of 'Hook-Server' folder" "success"
        else
            print_status "Fetching the contents of 'Hook-Server' folder" "failed"
            exit 1
        fi
    ) || exit



    # Open port 5000 in the firewall
    sudo ufw allow 5000 > /dev/null 2>&1

    # Reload UFW to apply changes
    sudo ufw reload > /dev/null 2>&1
    sudo chmod u+s $DirectoryPath/Hook-Server/main.py
    create_systemd_service_server
}

function configure_git_ssh() {
    # Check if SSH is available
    if ! command -v ssh &> /dev/null; then
        while true; do
            # Ask if the user wants to install SSH
            read -p "$(echo -e "${YELLOW}> SSH is not installed. Do you want to install SSH? (y/n): ${NC}")" InstallSSH

            if [ "$(echo "$InstallSSH" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Inform the user about the installation process
                echo "> Installing SSH"

                # Check the Linux distribution and install SSH accordingly
                if [ -f /etc/redhat-release ]; then
                    # For Red Hat-based systems (e.g., CentOS)
                    sudo yum install -y openssh
                elif [ -f /etc/debian_version ]; then
                    # For Debian-based systems (e.g., Ubuntu)
                    sudo apt-get update
                    sudo apt-get install -y openssh-client
                else
                    # Unsupported Linux distribution
                    echo -e "> Unsupported Linux distribution. Please install SSH manually."
                    exit 1
                fi

                # Display success message
                print_status "Installing SSH" "success"
                break
            elif [ "$(echo "$InstallSSH" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                # User chose not to install SSH
                echo "> SSH is required for this script. Exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Check if SSH key exists
    if [ ! -f ~/.ssh/id_rsa ]; then
        print_status "No SSH key found" "failure"
        while true; do
            # Prompt user to generate SSH key
            read -p "$(echo -e "${YELLOW}> Do you want to generate an SSH key? (y/n): ${NC}")" GenerateSsh

            if [ "$(echo "$GenerateSsh" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Prompt user to enter email address
                read -p "$(echo -e "${YELLOW}> Enter your email address: ${NC}")" EmailAddress

                # Generate SSH key
                echo "> Generating SSH key"
                ssh-keygen -t rsa -b 4096 -C "$EmailAddress"

                # Display the SSH public key
                echo "> Add the following SSH public key to your Git hosting service:"
                echo ""
                cat ~/.ssh/id_rsa.pub
                echo ""

                # Prompt user to add SSH key to GitHub
                echo "> Press Enter after adding the SSH key to continue."
                read -r
                break
            elif [ "$(echo "$GenerateSsh" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                echo "> Skipping SSH key generation. This is needed to connect to GitHub, exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Start the ssh-agent in the background
    eval "$(ssh-agent -s)"  > /dev/null 2>&1

    # Check if the SSH key is already added
    if ! ssh-add -l | grep -q "$HOME/.ssh/id_rsa"; then
        # If not added, add the SSH private key to the ssh-agent
        ssh-add ~/.ssh/id_rsa > /dev/null 2>&1
    fi

    # Check if SSH key is associated with GitHub
    if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        :
    else
        print_status "Testing SSH key connection to GitHub" "failure" 0
        echo "> Please ensure that the SSH key is added to your GitHub account and try again."
        # Prompt user to ask if they want to fetch the SSH key
        read -p "$(echo -e "${YELLOW}> Do you want to fetch the SSH key? (y/n): ${NC}")" FetchSsh
        if [ "$(echo "$FetchSsh" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
            # Fetch the SSH key
            echo "> Add the following SSH public key to your Git hosting service:"
            echo ""
            cat ~/.ssh/id_rsa.pub
            echo ""

            # Prompt user to add SSH key to GitHub
            echo "> Press Enter after adding the SSH key to continue."
            read -r

            # Test the SSH key connection to GitHub
            if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
                print_status "Testing SSH key connection to GitHub" "success"
            else
                print_status "Testing SSH key connection to GitHub" "failure"
                exit 1
            fi
        fi
        exit 1
    fi
    
    # Check if Git is available
    if ! command -v git &> /dev/null; then
        print_status "Checking if Git is installed" "failure" 0
        while true; do
            # Ask if the user wants to install Git
            read -p "$(echo -e "${YELLOW}> Git is not installed. Do you want to install Git? (y/n): ${NC}")" InstallGit

            if [ "$(echo "$InstallGit" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Inform the user about the installation process
                echo "> Installing Git"

                # Check the Linux distribution and install Git accordingly
                if [ -f /etc/redhat-release ]; then
                    # For Red Hat-based systems (e.g., CentOS)
                    sudo yum install -y git
                elif [ -f /etc/debian_version ]; then
                    # For Debian-based systems (e.g., Ubuntu)
                    sudo apt-get update
                    sudo apt-get install -y git
                else
                    # Unsupported Linux distribution
                    echo -e "\r\033[K> Unsupported Linux distribution. Please install Git manually."
                    exit 1
                fi

                # Display success message
                print_status "Installing Git" "success"
                break
            elif [ "$(echo "$InstallGit" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                # User chose not to install Git
                print_status "Git is required for this script. Exiting." "failure" 0
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    else
        print_status "Checking if Git is installed" "success"
    fi

    # Check if GitHub is already in known hosts
    if grep -q "github.com" ~/.ssh/known_hosts; then
        :
    else
        # Add GitHub to known hosts
        if ssh-keyscan github.com >> ~/.ssh/known_hosts; then
            :
        else
            exit 1
        fi
    fi

    # Check if the user has Git configured
    if ! git config --get user.name; then
        # Configure Git
        echo "> Configuring Git"
        read -p "$(echo -e "${YELLOW}> Enter your name: ${NC}")" UserName
        read -p "$(echo -e "${YELLOW}> Enter your email address: ${NC}")" UserEmail
        git config --global user.name "$UserName"
        git config --global user.email "$UserEmail"
        print_status "Configuring Git" "success"
    else
        print_status "Checking if Git is configured" "success"
    fi

    # Check if the user's home directory is already added as a safe directory
    if ! sudo git config --get-all --system safe.directory | grep -q "/home/$USER"; then
        # If not added, add it as a safe directory
        sudo git config --system --add safe.directory "/home/$USER"
    fi
}

function delete_systemd_service() {
    # Check if RepoName contains "dogiap-"; if not, prepend it
    if [[ ! $RepoName =~ ^dogiap- ]]; then
        RepoName="dogiap-$RepoName"
    fi

    # Specify the path to the Systemd service file
    local SERVICE_FILE="$SERVICE_PATH/$RepoName.service"

    # Check if the service file exists
    if [ -f "$SERVICE_FILE" ]; then
        echo "> Deleting the service file"
        sudo systemctl stop "$RepoName" > /dev/null 2>&1
        sudo systemctl disable "$RepoName" > /dev/null 2>&1
        sudo rm "$SERVICE_FILE" > /dev/null 2>&1
        print_status "Deleting the service file" "success"
    else
        print_status "Deleting the service file" "failure"
    fi
}

function create_systemd_service() {    
    while true; do
        read -p "$(echo -e "${YELLOW}> Enter the command to start the service for $RepoName: ${NC}")" ExecStartCommand
        
        # Create the directory if it doesn't exist
        SERVICE_FILE="/etc/systemd/system/dogiap-$RepoName.service"
        # Create the service file
        cat << EOF | sudo tee "$SERVICE_FILE" >/dev/null
[Unit]
Description=Service for $RepoName

[Service]
Type=simple
User=$USER
WorkingDirectory=$(pwd)
ExecStart=$ExecStartCommand
Restart=always

[Install]
WantedBy=multi-user.target
EOF
        echo "> Creating and starting \"$RepoName\""
        # Enable and start the service
        sudo systemctl enable dogiap-$RepoName > /dev/null 2>&1
        sudo systemctl start dogiap-$RepoName > /dev/null 2>&1
        sudo systemctl daemon-reload > /dev/null 2>&1
        sudo systemctl status dogiap-$RepoName > /dev/null 2>&1
        systemctl_status=$?
        
        if [ $systemctl_status -eq 0 ]; then
            print_status "Creating and starting \"$RepoName\"" "success"
            break
        else
            # Check if failure is due to ExecStart command
            if systemctl status dogiap-$RepoName | grep -q "ExecStart"; then
                echo "Failed to start the service. Please check the command and try again."
                # Remove previously created service file
                sudo rm "$SERVICE_FILE"
            else
                print_status "Creating and starting \"$RepoName\"" "failure"
                exit 1
            fi
        fi
    done
}

function create_systemd_service_server() {
    # Create the directory if it doesn't exist
    SERVICE_FILE="/etc/systemd/system/dogiap-$RepoName.service"
    DirectoryPath="/srv/DogiapHookServer/Hook-Server"
    # Create the service file
    cat << EOF | sudo tee "$SERVICE_FILE" >/dev/null
[Unit]
Description=Service for $RepoName

[Service]
Type=simple
User=$USER
WorkingDirectory=$DirectoryPath
ExecStart=python3 $DirectoryPath/main.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF
    echo "> Creating and starting \"$RepoName\""
    # Enable and start the service
    sudo systemctl enable dogiap-$RepoName > /dev/null 2>&1
    sudo systemctl start dogiap-$RepoName > /dev/null 2>&1
    sudo systemctl daemon-reload > /dev/null 2>&1
    sudo systemctl status dogiap-$RepoName > /dev/null 2>&1
    systemctl_status=$?
    if [ $systemctl_status -eq 0 ]; then
        print_status "Creating and starting \"$RepoName\"" "success"
    else
        print_status "Creating and starting \"$RepoName\"" "failure"
        exit 1
    fi
}

function main() {
    # Check if the current directory is empty
    if [ ! -z "$(ls -A)" ]; then
    echo "The current directory is not empty, please run this in an empty directory."
    exit 1
    fi

    # Use chown to give the current user ownership of the current directory and its contents
    chown -R "$USER" "." > /dev/null 2>&1

    # Check if the user has Git and SSH set up
    configure_git_ssh

    echo "> Cloning Git repository from $SshUrl"
    # Attempt to clone the repository
    if git clone -q $SshUrl . 2>&1 | grep -q "Permission denied"; then
        print_status "Permission denied while cloning Git repository from $SshUrl" "failure"
        exit 1
    elif [ $? -eq 0 ]; then
        print_status "Cloning Git repository from $SshUrl" "success"
    else
        print_status "Cloning Git repository from $SshUrl" "failure"
        exit 1
    fi

    # Get the current remote URL
    CurrentRemoteUrl=$(git remote get-url origin) > /dev/null 2>&1

    # Check if the current remote URL is already in SSH format
    if [[ $CurrentRemoteUrl == "git@github.com:"* ]]; then
        # Extracting username and repository name using regular expressions
        regex="git@github.com:([^\/]+)\/([^\/]+)\.git"
        if [[ $CurrentRemoteUrl =~ $regex ]]; then
            if [[ ${#BASH_REMATCH[@]} -eq 3 ]]; then
                GithubUsername="${BASH_REMATCH[1]}"
                RepoName="${BASH_REMATCH[2]}"
                RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
                SshUrl="git@github.com:$GithubUsername/$RepoName.git"
            else
                echo " "
                print_status "Failed to extract username and repository name from SSH URL." "failure"
                exit 1
            fi
        fi
    else
        # Extracting username and repository name using regular expressions
        regex="https:\/\/github.com\/([^\/]+)\/([^\/]+)\.git"
        if [[ $CurrentRemoteUrl =~ $regex ]]; then
            if [[ ${#BASH_REMATCH[@]} -eq 3 ]]; then
                echo "> Updating remote URL to use SSH"
                GithubUsername="${BASH_REMATCH[1]}"
                RepoName="${BASH_REMATCH[2]}"
                RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
                SshUrl="git@github.com:$GithubUsername/$RepoName.git"

                # Update the remote URL to use SSH
                if git remote set-url origin "$SshUrl" > /dev/null 2>&1; then
                    print_status "Updating remote URL to use SSH" "success"
                else
                    print_status "Failed to update remote URL to use SSH" "failure"
                fi
            else
                echo " "
                print_status "Failed to extract username and repository name from HTTP URL." "failure"
                exit 1
            fi
        fi
    fi

    # Check if GitHub Actions workflow file already exists
    if [ -f "$WorkflowFilePath" ]; then
        while true; do
            read -p "$(echo -e "${YELLOW}> The GitHub Actions file already exists. Do you want to rebuild it? (y/n): ${NC}")" rebuildConfirmation
            if [ "$(echo "$rebuildConfirmation" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                rm -rf ./.github
                break
            elif [ "$(echo "$rebuildConfirmation" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                break
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Create GitHub Actions directory and file if it doesn't exist
    if [ ! -f "$WorkflowFilePath" ]; then
        echo "> Creating GitHub Actions directory and file"  
        mkdir -p ./.github/workflows
        cat <<EOL > "$WorkflowFilePath"
name: Auto Update ->  $RepoName

on:
  push:
    branches:
      - main

jobs:
  restart-$RepoName:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Send POST request to restart  $RepoName
        run: |
          curl_response=\$(curl -X POST "$WebHookServerUrl" -H "Content-Type: application/json" -H "X-GitHub-Event: push" --data '{"ContainerName": "$RepoName", "ProgramPath": "'$(pwd)'"}' --fail --silent --show-error)

          if [ \$? -ne 0 ]; then
            echo "> Failed to send webhook request"
            exit 1
          fi

          echo "> Webhook request sent successfully. Response: \$curl_response"
          exit 0
EOL
        print_status "Creating GitHub Actions directory and file" "success"
    fi

   # Create the service file
    if sudo systemctl is-active --quiet dogiap-$RepoName; then
        # Check if the user wants to rebuild the service
        read -p "$(echo -e "${YELLOW}> Service \"$RepoName\" is already running. Do you want to rebuild? (y/n): ${NC}")" choice
        sudo systemctl stop dogiap-$RepoName
        sudo systemctl disable dogiap-$RepoName
        sudo rm /etc/systemd/system/dogiap-$RepoName.service
        create_systemd_service
    else
        create_systemd_service
    fi

    # Add the workflow file to Git
    echo "> Adding all files to Git"
    git add . > /dev/null 2>&1
    add_status=$?
    if [ $add_status -eq 0 ]; then
        print_status "Adding all files to Git" "success"
    else
        print_status "Adding all files to Git" "failure"
        exit 1
    fi

    # Check if there are changes to commit
    if [ -n "$(git status --porcelain)" ]; then
        echo "> Changes detected. Committing the changes"
        
        # Commit the changes
        git commit -m "Everything set up for automatic GitHub pulls with Docker" > /dev/null 2>&1
        commit_status=$?

        if [ $commit_status -eq 0 ]; then
            print_status "Committing the changes" "success"
            # Push the changes
            echo "> Pushing the changes"
            git push origin main > /dev/null 2>&1
            push_status=$?
            if [ $push_status -eq 0 ]; then
                print_status "Pushing the changes" "success"
            else
                print_status "Pushing the changes" "failure"
                exit 1
            fi
        else
            print_status "Committing the changes" "failure"
            exit 1
        fi
    else
        echo -e "${GREEN}> Repository is up-to-date, no changes to commit."
    fi
    sudo chmod u+s "$(pwd)/main.py"
    exit 0
}

# Check for command-line arguments
if [ "$#" -eq 0 ]; then
    usage
fi

# Parse command-line options
while [ "$#" -gt 0 ]; do
    case "$1" in
        --setup)
            server_setup
            ;;
        --start)
            start
            ;;
        --check)
            check
            ;;
        --list)
            list_all_services
            ;;
        --log)
            shift
            RepoName="$1"
            print_service_logs
            ;;
        --help | -h)
            usage
            ;;
        --version | -v)
            version
            ;;
        --delete | --remove | -d | -r)
            shift
            RepoName="$1"
            delete_systemd_service
            ;;
        *)
            # Check if the argument matches either SSH or HTTPS GitHub repository patterns
            if [[ "$1" =~ $ssh_pattern || "$1" =~ $https_pattern ]]; then
                SshUrl="$1"
                main
            else
                echo "> Invalid GitHub repository link. Please provide a valid link."
                exit 1
            fi
            ;;
    esac
    shift
done
