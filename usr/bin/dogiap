#!/bin/bash

# Define the version
VERSION="1.0.0"
ssh_pattern="git@github.com:*/*"
https_pattern="https://github.com/*/*"

# Function to display usage information
usage() {
    echo -e "Usage: dogiap <GitHub repository link>"
    echo -e "Options:"
    echo -e "  --setup\tSet up server for webhook requests (place in its own folder)"
    echo -e "  --v\t\tDisplay version information"
    exit 1
}

# Function to display version information
version() {
    echo "dogiap version $VERSION"
    exit 0
}

# Function to set up the server
server() {
    echo "> Work in progress: Setting up the server..."
    # Add your server setup logic here
    echo "> Server setup logic will be implemented in future releases."
    exit 1
}

# Function to set up EVERYTHING!
main() {
    # Check if the current directory is empty
    if [ ! -z "$(ls -A)" ]; then
    echo "The current directory is not empty, please run this in an empty directory."
    exit 1
    fi

    # Check if SSH is available
    if ! command -v ssh &> /dev/null; then
        # Ask if the user wants to install SSH
        read -p "> SSH is not installed. Do you want to install SSH? (y/n): " InstallSSH

        if [ "$InstallSSH" = "y" ]; then
            # Inform the user about the installation process
            echo "> Installing SSH..."

            # Check the Linux distribution and install SSH accordingly
            if [ -f /etc/redhat-release ]; then
                # For Red Hat-based systems (e.g., CentOS)
                sudo yum install -y openssh
            elif [ -f /etc/debian_version ]; then
                # For Debian-based systems (e.g., Ubuntu)
                sudo apt-get update
                sudo apt-get install -y openssh-client
            else
                # Unsupported Linux distribution
                echo -e "\r\033[K> Unsupported Linux distribution. Please install SSH manually."
                exit 1
            fi

            # Display success message
            echo -e "\r\033[K> SSH has been installed successfully."
        else
            # User chose not to install SSH
            echo "> SSH is required for this script. Exiting."
            exit 1
        fi
    fi

    # Check if SSH key exists
    if [ ! -f ~/.ssh/id_rsa ]; then
        echo "> No SSH key found."

        # Prompt user to generate SSH key
        read -p "> Do you want to generate an SSH key? (y/n): " GenerateSsh

        if [ "$GenerateSsh" = "y" ]; then
            # Prompt user to enter email address
            read -p ">🖊️ Enter your email address: " EmailAddress

            # Generate SSH key
            echo "> Generating SSH key..."
            ssh-keygen -t rsa -b 4096 -C "$EmailAddress"

            # Start the ssh-agent in the background
            eval "$(ssh-agent -s)"

            # Add SSH private key to the ssh-agent
            ssh-add ~/.ssh/id_rsa

            # Display the SSH public key
            echo "> Add the following SSH public key to your Git hosting service:"
            echo ""
            cat ~/.ssh/id_rsa.pub
            echo ""

            # Prompt user to add SSH key to GitHub
            echo "> Press Enter after adding the SSH key to continue."
            read -r
        else
            echo "> Skipping SSH key generation. This is needed to connect to GitHub, exiting."
            exit 1
        fi
    fi

    # Check if SSH key is associated with GitHub
    echo "> Testing SSH key connection to GitHub..."
    if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        echo "> SSH key is connected to GitHub."
    else
        echo "> Unable to authenticate with GitHub using the SSH key."
        echo "> Please ensure that the SSH key is added to your GitHub account and try again."
        exit 1
    fi
    # HER ER JEG
    if ! command -v git &> /dev/null; then
        # Ask if the user wants to install Git
        read -p "> Git is not installed. Do you want to install Git? (y/n): " InstallGit

        if [ "$InstallGit" = "y" ]; then
            # Inform the user about the installation process
            echo "> Installing Git..."

            # Check the Linux distribution and install Git accordingly
            if [ -f /etc/redhat-release ]; then
                # For Red Hat-based systems (e.g., CentOS)
                sudo yum install -y git
            elif [ -f /etc/debian_version ]; then
                # For Debian-based systems (e.g., Ubuntu)
                sudo apt-get update
                sudo apt-get install -y git
            else
                # Unsupported Linux distribution
                echo -e "\r\033[K> Unsupported Linux distribution. Please install Git manually."
                exit 1
            fi

            # Display success message
            echo -e "\r\033[K> Git has been installed successfully."
        else
            # User chose not to install Git
            echo "> Git is required for this script. Exiting."
            exit 1
        fi
    fi
    # Update remote URL to use SSH
    if [[ $SshUrl == "https://"* ]]; then
        echo "> Updating remote URL to use SSH..."

        # Extracting username and repository name using regular expressions
        regex="https://github.com/([^/]+)/([^/]+)\.git"
        if [[ $SshUrl =~ $regex ]]; then
            GithubUsername="${BASH_REMATCH[1]}"
            RepoName="${BASH_REMATCH[2]}"
            RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
            SshUrl="git@github.com:$GithubUsername/$RepoName.git"
            git remote set-url origin "$SshUrl"
        fi
    fi

    # If the URL is already in SSH format, print the extracted values
    if [[ $SshUrl == "git@github.com:"* ]]; then
        regex="git@github.com:([^/]+)/([^/]+)\.git"
        if [[ $SshUrl =~ $regex ]]; then
            GithubUsername="${BASH_REMATCH[1]}"
            RepoName="${BASH_REMATCH[2]}"
            RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
        fi
    fi

    echo "> Cloning Git repository from $SshUrl..."
    # Clone the Git repository into the current directory
    git clone -q $SshUrl .

    # Check if the clone was successful
    if [ $? -eq 0 ]; then
        echo "> Repository cloned successfully."
    else
        echo "> Failed to clone the repository. Exiting..."
        exit 1
    fi

    # Setup variables for GitHub Actions workflow file
    WorkflowFilePath="./.github/workflows/automatic-pull.yml"
    WebHookServerUrl="129.242.219.112:5000/git-webhook"

    # Check if GitHub Actions workflow file already exists
    if [ -f "$WorkflowFilePath" ]; then
        read -p "> The GitHub Actions file already exists. Do you want to delete it? (y/n): " deleteConfirmation
        if [ "$deleteConfirmation" == "y" ]; then
            echo "> Deleting existing GitHub Actions file..."
            rm "$WorkflowFilePath"
            echo -e "\r\033[K> Deleting existing GitHub Actions file... Successful"
            
            # Create GitHub Actions directory and file
            echo "> Creating GitHub Actions directory and file..."  
            mkdir -p ./.github/workflows
            cat <<EOL > "$WorkflowFilePath"
name: Auto Update -> $RepoName

on:
push:
    branches:
    - main

jobs:
restart-$RepoName:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout to the branch
        uses: actions/checkout@v2

    - name: Send POST request to restart $RepoName
        run: |
        curl_response=\$(curl -X POST "$WebHookServerUrl" -H "Content-Type: application/json" -H "X-GitHub-Event: push" --data '{"ContainerName": "$RepoName"}' --fail --silent --show-error)
        
        if [ \$? -ne 0 ]; then
            echo "> Failed to send webhook request"
            exit 1
        fi
        
        echo "> Webhook request sent successfully. Response: \$curl_response"
        exit 0
EOL
            echo -e "\r\033[K> Creating GitHub Actions directory and file...   Successful"
        else
            echo "> Skipping deletion of GitHub Actions file."
            exit 0
        fi
    else
        # Create GitHub Actions directory and file
        echo "> Creating GitHub Actions directory and file..."  
        mkdir -p ./.github/workflows
        cat <<EOL > "$WorkflowFilePath"
name: Auto Update -> $RepoName

on:
push:
    branches:
    - main

jobs:
restart-$RepoName:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout to the branch
        uses: actions/checkout@v2

    - name: Send POST request to restart $RepoName
        run: |
        curl_response=\$(curl -X POST "$WebHookServerUrl" -H "Content-Type: application/json" -H "X-GitHub-Event: push" --data '{"ContainerName": "$RepoName"}' --fail --silent --show-error)
        
        if [ \$? -ne 0 ]; then
            echo "> Failed to send webhook request"
            exit 1
        fi
        
        echo "> Webhook request sent successfully. Response: \$curl_response"
        exit 0
EOL
        echo -e "\r\033[K> Creating GitHub Actions directory and file...   Successful"
    fi

    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        # Ask if the user wants to install Docker
        read -p "> Docker is not installed. Do you want to install Docker? (y/n): " InstallDocker

        if [ "$InstallDocker" = "y" ]; then
            # Inform the user about the installation process
            echo "> Installing Docker..."

            # Check the Linux distribution and install Docker accordingly
            if [ -f /etc/redhat-release ]; then
                # For Red Hat-based systems (e.g., CentOS)
                sudo yum install -y docker
            elif [ -f /etc/debian_version ]; then
                # For Debian-based systems (e.g., Ubuntu)
                sudo apt-get update
                sudo apt-get install -y docker.io
            else
                # Unsupported Linux distribution
                echo -e "\r\033[K> Unsupported Linux distribution. Please install Docker manually."
                exit 1
            fi

            # Start Docker service
            sudo systemctl start docker

            # Display success message
            echo -e "\r\033[K> Docker has been installed successfully."
        else
            # User chose not to install Docker
            echo "> Docker is required for this script. Exiting."
            exit 1
        fi
    fi

    # Setup variables for Docker file
    DockerFilePath="./Dockerfile"

    # Check if Dockerfile already exists
    if [ -f "$DockerFilePath" ]; then
        read -p "> The Dockerfile already exists. Do you want to delete it and create a new one? (y/n): " deleteConfirmation
        if [ "$deleteConfirmation" == "y" ]; then
            echo "> Deleting existing Dockerfile..."
            rm "$DockerFilePath"
            echo -e "\r\033[K> Deleting existing Dockerfile... Successful"
            
            # Create Dockerfile
            echo "> Creating Dockerfile..."  
            cat <<EOL > "$DockerFilePath"
# Use an official Python runtime as a parent image
FROM python:3.9

# Install Git
RUN apt-get update && \
    apt-get install -y git

# Set working directory
WORKDIR /app

# Mount data directory as a volume
VOLUME /app/data

# Install dependencies (if needed)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Define the command to run on container start
CMD ["python3", "main.py"]
EOL
        echo -e "\r\033[K> Creating Dockerfile...   Successful"
    else
        echo "> Skipping deletion of Dockerfile."
        exit 0
    fi
else
    # Create Dockerfile
    echo "> Creating Dockerfile..."  
    cat <<EOL > "$DockerFilePath"
# Use an official Python runtime as a parent image
FROM python:3.9

# Install Git
RUN apt-get update && \
    apt-get install -y git

# Set working directory
WORKDIR /app

# Mount data directory as a volume
VOLUME /app/data

# Install dependencies (if needed)
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Define the command to run on container start
CMD ["python3", "main.py"]
EOL
        echo -e "\r\033[K> Creating Dockerfile...   Successful"
    fi

    # Setup permissions for Docker
    echo "> Setting up permissions for Docker..."
    sudo chmod 666 /var/run/docker.sock

    # Check if the Docker container already exists
    if docker ps -a --format '{{.Names}}' | grep -q "^$container_name$"; then
        echo "Container \"$RepoName\" already exists."

        # Prompt user for action
        read -p "Do you want to delete and build a new one (y/n)? " choice
        if [ "$choice" == "y" ]; then
            echo "> Deleting existing Docker container \"$RepoName\"..."
            docker stop "$RepoName" > /dev/null 2>&1 && docker rm "$RepoName" > /dev/null 2>&1
            delete_status=$?
            if [ $delete_status -eq 0 ]; then
                echo "> Deleted existing Docker container \"$RepoName\""

                # Build and run the Docker image
                echo "> Building Docker image \"$RepoName\"..."
                docker build -t "$RepoName" . > /dev/null 2>&1
                build_status=$?
                if [ $build_status -eq 0 ]; then
                    echo "> Building Docker image \"$RepoName\"... Successful"
                    echo "> Running Docker image \"$RepoName\"..."
                    docker run -it -d --name "$RepoName" "$RepoName"
                    run_status=$?
                    if [ $run_status -eq 0 ]; then
                        echo "> Running Docker image \"$RepoName\"... Successful"
                    else
                        echo "> Running Docker image \"$RepoName\"... Failed"
                        exit 1
                    fi
                else
                    echo "> Building Docker image \"$RepoName\"... Failed"
                    exit 1
                fi
            else
                echo "> Failed to delete existing Docker container \"$RepoName\""
                exit 1
            fi
        else
            # Restart the existing Docker container
            echo "> Restarting existing Docker container \"$RepoName\"..."
            docker restart "$RepoName" > /dev/null 2>&1
            restart_status=$?
            if [ $restart_status -eq 0 ]; then
                echo "> Restarting existing Docker container \"$RepoName\"... Successful"
            else
                echo "> Restarting existing Docker container \"$RepoName\"... Failed"
                exit 1
            fi
        fi
    else
        # Build and run the Docker image
        echo "> Building Docker image \"$RepoName\"..."
        docker build -t "$RepoName" . > /dev/null 2>&1
        build_status=$?
        if [ $build_status -eq 0 ]; then
            echo "> Building Docker image \"$RepoName\"... Successful"
            echo "> Running Docker image \"$RepoName\"..."
            docker run -it -d --name "$RepoName" "$RepoName"
            run_status=$?
            if [ $run_status -eq 0 ]; then
                echo "> Running Docker image \"$RepoName\"... Successful"
            else
                echo "> Running Docker image \"$RepoName\"... Failed"
                exit 1
            fi
        else
            echo "> Building Docker image \"$RepoName\"... Failed"
            exit 1
        fi
    fi

    # Add the workflow file to Git
    echo "> Adding all files to Git..."
    git add -q .
    add_status=$?
    if [ $add_status -eq 0 ]; then
        echo -e "\r\033[K> Adding all files to Git... Successful"
    else
        echo -e "\r\033[K> Adding all files to Git... Failed"
        exit 1
    fi

    # Commit the changes
    echo "> Committing the changes..."
    git commit -q -m "Everything set up for automatic GitHub pulls with Docker"
    commit_status=$?
    if [ $commit_status -eq 0 ]; then
        echo -e "\r\033[K> Committing the changes... Successful"
    else
        echo -e "\r\033[K> Committing the changes... Failed"
        exit 1
    fi

    # Push the changes
    echo "> Pushing the changes..."
    git push origin main > /dev/null 2>&1
    push_status=$?
    if [ $push_status -eq 0 ]; then
        echo -e "\r\033[K> Pushing the changes... Successful"
    else
        echo -e "\r\033[K> Pushing the changes... Failed"
        exit 1
    fi
    exit 0
}

# Check for command-line arguments
if [ "$#" -eq 0 ]; then
    usage
fi

# Parse command-line options
while [ "$#" -gt 0 ]; do
    SshUrl="$1"
    case "$1" in
        --setup)
            server
            ;;
        --v)
            version
            ;;
        *)
            # Check if the argument matches either SSH or HTTPS GitHub repository patterns
            if [[ "$SshUrl" =~ $ssh_pattern || "$SshUrl" =~ $https_pattern ]]; then
                main
            else
                echo "> Invalid GitHub repository link. Please provide a valid link."
                exit 1
            fi
            ;;
    esac
    shift
done