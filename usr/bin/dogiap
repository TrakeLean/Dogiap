#!/bin/bash

# Define the version
VERSION="1.0.0"
ssh_pattern="git@github.com:*/*"
https_pattern="https://github.com/*/*"
# ANSI color codes
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
# Setup variables for GitHub Actions workflow file
WorkflowFilePath="./.github/workflows/automatic-pull.yml"
WebHookServerUrl="129.242.219.112:5000/git-webhook"

# Print status message to the terminal
function print_status() {
    local message="$1"
    local result="$2"

    if [ "$result" == "success" ]; then
        echo -e "\033[F\r> ${GREEN}$message${NC}                   "
    else
        echo -e "\033[F\r> ${RED}$message${NC}                     "
    fi

    sleep 0.25  # Adjust the sleep duration as needed
}

# Function to display usage information
usage() {
    echo -e "Usage: dogiap <GitHub repository link>"
    echo -e "Options:"
    echo -e "  --setup\tSet up server for webhook requests (place in its own folder)"
    echo -e "  --v\t\tDisplay version information"
    exit 1
}

# Function to display version information
version() {
    echo "dogiap version $VERSION"
    exit 0
}

# Function to set up the server
server() {
    echo "> Work in progress: Setting up the server"
    # Add your server setup logic here
    echo "> Server setup logic will be implemented in future releases."
    exit 1
}

# Function to set up EVERYTHING!
main() {
    # Check if the current directory is empty
    if [ ! -z "$(ls -A)" ]; then
    echo "The current directory is not empty, please run this in an empty directory."
    exit 1
    fi

    # Setup permissions for Docker
    echo "> Setting up permissions"
    sudo chmod 666 /var/run/docker.sock > /dev/null 2>&1

    # Use chown to give the current user ownership of the current directory and its contents
    chown -R "$USER" "." > /dev/null 2>&1
    print_status "Setting up permissions" "success"

    # Check if SSH is available
    if ! command -v ssh &> /dev/null; then
        while true; do
            # Ask if the user wants to install SSH
            read -p "$(echo -e "${YELLOW}> SSH is not installed. Do you want to install SSH? (y/n): ${NC}")" InstallSSH

            if [ "$(echo "$InstallSSH" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Inform the user about the installation process
                echo "> Installing SSH"

                # Check the Linux distribution and install SSH accordingly
                if [ -f /etc/redhat-release ]; then
                    # For Red Hat-based systems (e.g., CentOS)
                    sudo yum install -y openssh
                elif [ -f /etc/debian_version ]; then
                    # For Debian-based systems (e.g., Ubuntu)
                    sudo apt-get update
                    sudo apt-get install -y openssh-client
                else
                    # Unsupported Linux distribution
                    echo -e "> Unsupported Linux distribution. Please install SSH manually."
                    exit 1
                fi

                # Display success message
                print_status "Installing SSH" "success"
                break
            elif [ "$(echo "$InstallSSH" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                # User chose not to install SSH
                echo "> SSH is required for this script. Exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Check if SSH key exists
    if [ ! -f ~/.ssh/id_rsa ]; then
        echo "> No SSH key found."
        while true; do
            # Prompt user to generate SSH key
            read -p "$(echo -e "${YELLOW}> Do you want to generate an SSH key? (y/n): ${NC}")" GenerateSsh

            if [ "$(echo "$GenerateSsh" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Prompt user to enter email address
                read -p "$(echo -e "${YELLOW}> Enter your email address: ${NC}")" EmailAddress

                # Generate SSH key
                echo "> Generating SSH key"
                ssh-keygen -t rsa -b 4096 -C "$EmailAddress"

                # Start the ssh-agent in the background
                eval "$(ssh-agent -s)"

                # Add SSH private key to the ssh-agent
                ssh-add ~/.ssh/id_rsa

                # Display the SSH public key
                echo "> Add the following SSH public key to your Git hosting service:"
                echo ""
                cat ~/.ssh/id_rsa.pub
                echo ""

                # Prompt user to add SSH key to GitHub
                echo "> Press Enter after adding the SSH key to continue."
                read -r
                break
            elif [ "$(echo "$GenerateSsh" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                echo "> Skipping SSH key generation. This is needed to connect to GitHub, exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Check if SSH key is associated with GitHub
    echo "> Testing SSH key connection to GitHub"
    if ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
        print_status "Testing SSH key connection to GitHub" "success"
    else
        print_status "Testing SSH key connection to GitHub" "failure"
        echo "> Please ensure that the SSH key is added to your GitHub account and try again."
        exit 1
    fi
    
    # Check if Git is available
    if ! command -v git &> /dev/null; then
        while true; do
            # Ask if the user wants to install Git
            read -p "$(echo -e "${YELLOW}> Git is not installed. Do you want to install Git? (y/n): ${NC}")" InstallGit

            if [ "$(echo "$InstallGit" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Inform the user about the installation process
                echo "> Installing Git"

                # Check the Linux distribution and install Git accordingly
                if [ -f /etc/redhat-release ]; then
                    # For Red Hat-based systems (e.g., CentOS)
                    sudo yum install -y git
                elif [ -f /etc/debian_version ]; then
                    # For Debian-based systems (e.g., Ubuntu)
                    sudo apt-get update
                    sudo apt-get install -y git
                else
                    # Unsupported Linux distribution
                    echo -e "\r\033[K> Unsupported Linux distribution. Please install Git manually."
                    exit 1
                fi

                # Display success message
                print_status "Installing Git" "success"
                break
            elif [ "$(echo "$InstallGit" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                # User chose not to install Git
                echo "> Git is required for this script. Exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    echo "> Cloning Git repository from $SshUrl"
    # Clone the Git repository into the current directory
    git clone -q $SshUrl . > /dev/null 2>&1

    # Check if the clone was successful
    if [ $? -eq 0 ]; then
        print_status "Cloning Git repository from $SshUrl" "success"
    else
        print_status "Cloning Git repository from $SshUrl" "failure"
        exit 1
    fi

    # Get the current remote URL
    CurrentRemoteUrl=$(git remote get-url origin) > /dev/null 2>&1

    # Check if the current remote URL is already in SSH format
    if [[ $CurrentRemoteUrl == "git@github.com:"* ]]; then
        # Extracting username and repository name using regular expressions
        regex="git@github.com:([^\/]+)\/([^\/]+)\.git"
        if [[ $CurrentRemoteUrl =~ $regex ]]; then
            if [[ ${#BASH_REMATCH[@]} -eq 3 ]]; then
                GithubUsername="${BASH_REMATCH[1]}"
                RepoName="${BASH_REMATCH[2]}"
                RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
                SshUrl="git@github.com:$GithubUsername/$RepoName.git"
            else
                echo " "
                print_status "Failed to extract username and repository name from SSH URL." "failure"
                exit 1
            fi
        fi
    else
        # Extracting username and repository name using regular expressions
        regex="https:\/\/github.com\/([^\/]+)\/([^\/]+)\.git"
        if [[ $CurrentRemoteUrl =~ $regex ]]; then
            if [[ ${#BASH_REMATCH[@]} -eq 3 ]]; then
                echo "> Updating remote URL to use SSH"
                GithubUsername="${BASH_REMATCH[1]}"
                RepoName="${BASH_REMATCH[2]}"
                RepoName=$(echo "$RepoName" | tr '[:upper:]' '[:lower:]')  # Convert RepoName to lowercase
                SshUrl="git@github.com:$GithubUsername/$RepoName.git"

                # Update the remote URL to use SSH
                if git remote set-url origin "$SshUrl" > /dev/null 2>&1; then
                    print_status "Updating remote URL to use SSH" "success"
                else
                    print_status "Failed to update remote URL to use SSH" "failure"
                fi
            else
                echo " "
                print_status "Failed to extract username and repository name from HTTP URL." "failure"
                exit 1
            fi
        fi
    fi

    # Check if GitHub Actions workflow file already exists
    if [ -f "$WorkflowFilePath" ]; then
        while true; do
            read -p "$(echo -e "${YELLOW}> The GitHub Actions file already exists. Do you want to rebuild it? (y/n): ${NC}")" rebuildConfirmation
            if [ "$(echo "$rebuildConfirmation" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                rm -rf ./.github
                break
            elif [ "$(echo "$rebuildConfirmation" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                break
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Create GitHub Actions directory and file if it doesn't exist
    if [ ! -f "$WorkflowFilePath" ]; then
        echo "> Creating GitHub Actions directory and file"  
        mkdir -p ./.github/workflows
        cat <<EOL > "$WorkflowFilePath"
name: Auto Update ->  $RepoName

on:
  push:
    branches:
      - main

jobs:
  restart- $RepoName:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v2

      - name: Send POST request to restart  $RepoName
        run: |
          curl_response=\$(curl -X POST "$WebHookServerUrl" -H "Content-Type: application/json" -H "X-GitHub-Event: push" --data '{"ContainerName": "$RepoName"}' --fail --silent --show-error)

          if [ \$? -ne 0 ]; then
            echo "> Failed to send webhook request"
            exit 1
          fi

          echo "> Webhook request sent successfully. Response: \$curl_response"
          exit 0
EOL
        print_status "Creating GitHub Actions directory and file" "success"
    fi

    # Check if Docker is installed
    if ! command -v docker &> /dev/null; then
        while true; do
            # Ask if the user wants to install Docker
            read -p "$(echo -e "${YELLOW}> Docker is not installed. Do you want to install Docker? (y/n): ${NC}")" InstallDocker

            if [ "$(echo "$InstallDocker" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                # Inform the user about the installation process
                echo "> Installing Docker"

                # Check the Linux distribution and install Docker accordingly
                if [ -f /etc/redhat-release ]; then
                    # For Red Hat-based systems (e.g., CentOS)
                    sudo yum install -y docker
                elif [ -f /etc/debian_version ]; then
                    # For Debian-based systems (e.g., Ubuntu)
                    sudo apt-get update
                    sudo apt-get install -y docker.io
                else
                    # Unsupported Linux distribution
                    echo -e "> Unsupported Linux distribution. Please install Docker manually."
                    exit 1
                fi

                # Start Docker service
                sudo systemctl start docker

                # Display success message
                print_status "Installing Docker" "success"
                break
            elif [ "$(echo "$InstallDocker" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                # User chose not to install Docker
                echo "> Docker is required for this script. Exiting."
                exit 1
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    fi

    # Setup variables for Docker file
    DockerFilePath="./Dockerfile"
    
    # Create Dockerfile
    echo "> Creating Dockerfile"  
    cat <<EOL > "$DockerFilePath"
# Use an official Python runtime as a parent image
FROM python:3.9

# Install Git
RUN apt-get update && \
    apt-get install -y git

# Set working directory
WORKDIR /app

# Copy everything from the host to the container
COPY . .

# Install dependencies (if needed)
RUN pip install --no-cache-dir -r requirements.txt

# Define the command to run on container start
CMD ["python3", "main.py"]
EOL
    print_status "Creating Dockerfile" "success"

    # Check if the Docker container already exists
    if docker ps -a --format '{{.Names}}' | grep -q "^$RepoName$"; then
        # Prompt user for action
        while true; do
            read -p "$(echo -e "${YELLOW}> Container \"$RepoName\" already exists. Do you want to rebuild? (y/n): ${NC}")" choice

            if [ "$(echo "$choice" | tr '[:upper:]' '[:lower:]')" = "y" ]; then
                echo "> Deleting existing Docker container \"$RepoName\""
                docker stop "$RepoName" > /dev/null 2>&1 && docker rm "$RepoName" > /dev/null 2>&1
                delete_status=$?
                if [ $delete_status -eq 0 ]; then
                    print_status "Deleting existing Docker container \"$RepoName\"" "success"

                    # Build and run the Docker image
                    echo "> Building Docker image \"$RepoName\""
                    docker build -t "$RepoName" . > /dev/null 2>&1
                    build_status=$?
                    if [ $build_status -eq 0 ]; then
                        print_status "Building Docker image \"$RepoName\"" "success"
                        echo "> Running Docker image \"$RepoName\""
                        docker run -it -d --name "$RepoName" "$RepoName" > /dev/null 2>&1
                        run_status=$?
                        if [ $run_status -eq 0 ]; then
                            print_status "Running Docker image \"$RepoName\"" "success"
                            break
                        else
                            print_status "Running Docker image \"$RepoName\"" "failure"
                            exit 1
                        fi
                    else
                        print_status "Building Docker image \"$RepoName\"" "failure"
                        exit 1
                    fi
                else
                    print_status "Deleting existing Docker container \"$RepoName\"" "failure"
                    exit 1
                fi
            elif [ "$(echo "$choice" | tr '[:upper:]' '[:lower:]')" = "n" ]; then
                echo "> Skipping deletion of existing Docker container \"$RepoName\""
                break
            else
                echo "> Invalid input. Please enter 'y' or 'n'."
            fi
        done
    else
        # Build and run the Docker image
        echo "> Building Docker image \"$RepoName\""
        docker build -t "$RepoName" . > /dev/null 2>&1
        build_status=$?
        if [ $build_status -eq 0 ]; then
            print_status "Building Docker image \"$RepoName\"" "success"
            echo "> Running Docker image \"$RepoName\""
            docker run -it -d --name "$RepoName" "$RepoName" > /dev/null 2>&1
            run_status=$?
            if [ $run_status -eq 0 ]; then
                print_status "Running Docker image \"$RepoName\"" "success"
            else
                print_status "Running Docker image \"$RepoName\"" "failure"
                exit 1
            fi
        else
            print_status "Building Docker image \"$RepoName\"" "failure"
            exit 1
        fi
    fi

    # Add the workflow file to Git
    echo "> Adding all files to Git"
    git add . > /dev/null 2>&1
    add_status=$?
    if [ $add_status -eq 0 ]; then
        print_status "Adding all files to Git" "success"
    else
        print_status "Adding all files to Git" "failure"
        exit 1
    fi

    # Check if there are changes to commit
    if [ -n "$(git status --porcelain)" ]; then
        echo "> Changes detected. Committing the changes"
        
        # Commit the changes
        git commit -m "Everything set up for automatic GitHub pulls with Docker" > /dev/null 2>&1
        commit_status=$?

        if [ $commit_status -eq 0 ]; then
            print_status "Committing the changes" "success"
            # Push the changes
            echo "> Pushing the changes"
            git push origin main > /dev/null 2>&1
            push_status=$?
            if [ $push_status -eq 0 ]; then
                print_status "Pushing the changes" "success"
            else
                print_status "Pushing the changes" "failure"
                exit 1
            fi
        else
            print_status "Committing the changes" "failure"
            exit 1
        fi
    else
        echo -e "${GREEN}> Repository is up-to-date, no changes to commit."
    fi
    exit 0
}

# Check for command-line arguments
if [ "$#" -eq 0 ]; then
    usage
fi

# Parse command-line options
while [ "$#" -gt 0 ]; do
    SshUrl="$1"
    case "$1" in
        --setup)
            server
            ;;
        --v)
            version
            ;;
        *)
            # Check if the argument matches either SSH or HTTPS GitHub repository patterns
            if [[ "$SshUrl" =~ $ssh_pattern || "$SshUrl" =~ $https_pattern ]]; then
                main
            else
                echo "> Invalid GitHub repository link. Please provide a valid link."
                exit 1
            fi
            ;;
    esac
    shift
done